import { GoogleGenerativeAI } from "@google/generative-ai";

export interface GeneratedExercise {
  question: string;
  instruction: string;
  options: string[];
  correctAnswer: number;
  explanation: string;
  xpReward: number;
}

export class PersonalizedLessonGenerator {
  private genAI: GoogleGenerativeAI;

  constructor(apiKey: string) {
    this.genAI = new GoogleGenerativeAI(apiKey);
  }

  async generateMultipleChoiceExercise(params: {
    level: "A1" | "A2" | "B1" | "B2";
    topic: string;
    exerciseNumber: number;
    userWeaknesses?: string[];
    userStrengths?: string[];
    completedLessons?: number;
    currentAccuracy?: number;
    currentStreak?: number;
    usedTopics?: string[];
    previousErrors?: string[];
    timestamp?: number;
  }): Promise<GeneratedExercise> {
    // TIPOS DE EJERCICIOS ESPEC√çFICOS - Rotaci√≥n forzada
    const exerciseTypes = [
      {
        type: "VOCABULARIO",
        instruction: "What does this English word mean?",
        format: "English word ‚Üí Spanish options",
        example: "What does 'stream' mean in 'I stream Netflix'? ‚Üí A) transmitir B) r√≠o C) correr D) gritar"
      },
      {
        type: "GRAM√ÅTICA", 
        instruction: "Complete the sentence with the correct option",
        format: "English sentence with blank ‚Üí English grammar options",
        example: "I _____ working from home since 2020. ‚Üí A) have been B) am C) was D) will be"
      },
      {
        type: "TRADUCCI√ìN",
        instruction: "Select the correct English translation",
        format: "Spanish phrase ‚Üí English translation options",
        example: "How do you say 'me gusta tu post' in English? ‚Üí A) I like your post B) I love your post C) I want your post D) I see your post"
      },
      {
        type: "COMPRENSI√ìN",
        instruction: "Read the text and answer the question",
        format: "Short English text ‚Üí English comprehension question",
        example: "Text: 'Ana is in a Zoom meeting with her team. She has been working remotely since 2020.' Question: Has Ana finished the Zoom meeting? ‚Üí A) No, she's still in it B) Yes, she finished C) She never started D) She's starting now"
      }
    ];

    // SELECCIONAR TIPO BASADO EN N√öMERO DE EJERCICIO (rotaci√≥n garantizada)
    const selectedType = exerciseTypes[params.exerciseNumber % 4];

    // CONTEXTOS MODERNOS ULTRA-ESPEC√çFICOS
    const modernContexts = [
      "usando apps de delivery como Uber Eats",
      "subiendo stories a Instagram", 
      "trabajando remotamente en videollamadas",
      "viendo series en Netflix y plataformas streaming",
      "haciendo videos para TikTok",
      "comprando online en Amazon",
      "chateando por WhatsApp con amigos",
      "dejando reviews en Google Maps",
      "pidiendo taxi por apps como Uber",
      "haciendo posts en redes sociales"
    ];

    const selectedContext = modernContexts[Math.floor(Math.random() * modernContexts.length)];

    // PROMPT ULTRA-ESPEC√çFICO EN ESPA√ëOL
    const prompt = `Eres un profesor de ingl√©s experto. Crea un ejercicio de tipo ${selectedType.type} para estudiantes hispanohablantes de nivel ${params.level}.

CONTEXTO OBLIGATORIO: ${selectedContext}
TEMA: ${params.topic}

INSTRUCCIONES CR√çTICAS:
üá¨üáß PREGUNTA e INSTRUCCI√ìN deben estar en INGL√âS (es una app para aprender ingl√©s)
üá™üá∏ SOLO la explicaci√≥n debe estar en ESPA√ëOL PERFECTO
üéØ Tipo de ejercicio: ${selectedType.type}
üì± Usar vocabulario moderno del contexto: ${selectedContext}
üë∂ Explicaci√≥n para principiantes absolutos en espa√±ol
‚ùå PROHIBIDO generar preguntas en espa√±ol (excepto para ejercicios de traducci√≥n)

FORMATO REQUERIDO:
${selectedType.format}

EJEMPLO ESPEC√çFICO:
${selectedType.example}

           ESTRUCTURA DE RESPUESTA (JSON v√°lido):
           {
             "question": "[Para COMPRENSI√ìN: incluir texto completo + pregunta. Para otros: solo pregunta]",
             "instruction": "${selectedType.instruction}",
             "options": ["opci√≥n 1", "opci√≥n 2", "opci√≥n 3", "opci√≥n 4"],
             "correctAnswer": 0,
             "explanation": "üéØ EXPLICACI√ìN COMPLETA EN ESPA√ëOL: [Explicaci√≥n detallada de por qu√© es correcta, con ejemplos adicionales, todo en espa√±ol perfecto para principiantes]"
           }

           IMPORTANTE: 
           üá¨üáß IDIOMA DE PREGUNTAS:
           - PREGUNTA: Siempre en INGL√âS (es una app para aprender ingl√©s)
           - INSTRUCCI√ìN: Siempre en INGL√âS (usar las definidas arriba)
           - OPCIONES: Depende del tipo (ingl√©s para gram√°tica/comprensi√≥n, espa√±ol para vocabulario)
           
           üá™üá∏ IDIOMA DE EXPLICACIONES:
           - La explicaci√≥n DEBE empezar con un emoji y estar completamente en espa√±ol
           - Incluir ejemplos adicionales en espa√±ol
           - Explicar por qu√© las otras opciones est√°n mal
           - Usar un tono amigable y pedag√≥gico
           
           üìã FORMATO:
           - Las opciones NO deben tener letras A), B), C), D)
           - Solo la palabra/frase directa
           - El componente agregar√° las letras autom√°ticamente
           
           ‚ö†Ô∏è CR√çTICO PARA COMPRENSI√ìN:
           - Si es tipo COMPRENSI√ìN, la pregunta DEBE incluir el texto completo a leer
           - Formato: "Text: 'Ana is in a Zoom meeting with her team...' Question: Has Ana finished the meeting?"
           - NO generar solo la pregunta sin el texto de contexto

           Responde SOLO el JSON, sin texto adicional:`;

    try {
      const model = this.genAI.getGenerativeModel({
        model: "gemini-1.5-flash", // ‚úÖ NUEVO MODELO - gemini-pro DEPRECADO
        generationConfig: {
          temperature: 0.9, // Alta creatividad para evitar repetici√≥n
          topP: 0.8,
          maxOutputTokens: 1024,
        },
      });

      console.log("ü§ñ GENERANDO EJERCICIO CON EXPLICACI√ìN EN ESPA√ëOL");
      console.log("üìù Tipo:", selectedType.type, "| Contexto:", selectedContext);
      
      const result = await model.generateContent(prompt);
      const text = result.response.text();

      console.log("‚úÖ RESPUESTA IA COMPLETA:", text);

      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error("No JSON found in AI response");
      }

      let exerciseData;
      try {
        exerciseData = JSON.parse(jsonMatch[0]);
      } catch (parseError) {
        console.error("JSON Parse Error:", parseError);
        throw new Error("Invalid JSON from AI");
      }

      // VALIDACI√ìN CR√çTICA: Verificar que explicaci√≥n est√© en espa√±ol
      if (exerciseData.explanation && exerciseData.explanation.length > 20) {
        // Contar palabras en espa√±ol vs ingl√©s (heur√≠stica simple)
        const spanishWords = ['es', 'la', 'el', 'un', 'una', 'con', 'por', 'para', 'que', 'de', 'del', 'en', 'se', 'y', 'o', 'pero', 'cuando', 'como', 'donde', 'porque', 'usamos', 'correcto', 'incorrecto', 'significa', 'ejemplo'];
        const explanationLower = exerciseData.explanation.toLowerCase();
        const spanishWordCount = spanishWords.filter(word => explanationLower.includes(' ' + word + ' ') || explanationLower.startsWith(word + ' ')).length;
        
        if (spanishWordCount < 3) {
          console.warn("‚ö†Ô∏è EXPLICACI√ìN POSIBLEMENTE EN INGL√âS - FORZANDO ESPA√ëOL");
          // Forzar explicaci√≥n en espa√±ol simple
          exerciseData.explanation = `üéØ NIVEL ${params.level}: La respuesta correcta es la opci√≥n ${String.fromCharCode(65 + exerciseData.correctAnswer)}. Esta estructura es muy com√∫n en ingl√©s moderno, especialmente cuando ${selectedContext.toLowerCase()}. Recuerda practicar este tipo de expresiones para sonar m√°s natural en ingl√©s.`;
        }
      }

      // Validar estructura b√°sica
      if (!exerciseData.question || !exerciseData.options || !Array.isArray(exerciseData.options) || exerciseData.options.length !== 4) {
        throw new Error("Invalid exercise structure from AI");
      }

      // Mezclar opciones para que la respuesta correcta no siempre sea la primera
      const correctAnswerIndex = exerciseData.correctAnswer || 0;
      const correctAnswerText = exerciseData.options[correctAnswerIndex];
      
      // Crear array de opciones mezcladas
      const shuffledOptions = [...exerciseData.options];
      
      // Algoritmo Fisher-Yates para mezclar
      for (let i = shuffledOptions.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffledOptions[i], shuffledOptions[j]] = [shuffledOptions[j], shuffledOptions[i]];
      }
      
      // Encontrar nueva posici√≥n de la respuesta correcta
      const newCorrectAnswer = shuffledOptions.findIndex(option => option === correctAnswerText);

      return {
        question: exerciseData.question,
        instruction: exerciseData.instruction || selectedType.instruction,
        options: shuffledOptions,
        correctAnswer: newCorrectAnswer,
        explanation: exerciseData.explanation || `Respuesta correcta: ${correctAnswerText}`,
        xpReward: 10,
      };
    } catch (error) {
      console.error("üö® ERROR GENERANDO EJERCICIO:", error);
      throw new Error(`La IA no pudo generar ejercicio. Error: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  // M√âTODO ELIMINADO - NO M√ÅS EJERCICIOS EST√ÅTICOS

  /**
   * Genera ejemplos espec√≠ficos para cada tipo de ejercicio
   */
  private getExampleForType(type: string, context: string): string {
    const examples: Record<string, string> = {
      "VOCABULARY": `"What does 'swipe' mean in '${context}'?" ‚Üí A) deslizar ‚úì B) tocar C) presionar D) escribir`,
      "GRAMMAR": `"I ____ ${context} every day." ‚Üí A) have been doing ‚úì B) am doing C) did D) will do`,
      "TRANSLATION": `"¬øC√≥mo se dice 'me encanta esto' when ${context}?" ‚Üí A) I love this ‚úì B) I like this C) I want this D) I need this`,
      "COMPREHENSION": `"Sarah was ${context} when her phone died. What happened?" ‚Üí A) Her phone died ‚úì B) She was happy C) She was working D) She was sleeping`
    };

    return examples[type] || `Example for ${type} in context of ${context}`;
  }
}

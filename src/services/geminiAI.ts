import { GoogleGenerativeAI } from "@google/generative-ai";
import { SmartExercise } from "./smartAI";

export interface GeneratedExercise {
  question: string;
  instruction: string;
  options: string[];
  correctAnswer: number;
  explanation: string;
  xpReward: number;
}

export class PersonalizedLessonGenerator {
  private genAI: GoogleGenerativeAI;

  constructor(apiKey: string) {
    this.genAI = new GoogleGenerativeAI(apiKey);
  }

    async generateMultipleChoiceExercise(params: {
    level: "A1" | "A2" | "B1" | "B2";
    topic: string;
    exerciseNumber: number;
    userWeaknesses?: string[];
    userStrengths?: string[];
    completedLessons?: number;
    currentAccuracy?: number;
    currentStreak?: number;
    usedTopics?: string[];
    previousErrors?: string[];
    timestamp?: number;
  }): Promise<GeneratedExercise> {
    // Contextos modernos espec√≠ficos
    const modernContexts = [
      "using Uber Eats to order food",
      "posting on Instagram stories", 
      "watching Netflix shows",
      "working from home on Zoom",
      "shopping on Amazon online",
      "chatting on WhatsApp",
      "leaving Google reviews"
    ];
    const selectedContext = modernContexts[params.exerciseNumber % modernContexts.length];

    const enhancedPrompt = `Eres un profesor experto de ingl√©s. Crea un ejercicio L√ìGICO y EDUCATIVO para hispanohablantes nivel ${params.level}.

CONTEXTO: ${selectedContext}
TEMA: ${params.topic}
EJERCICIO #: ${params.exerciseNumber}

REGLAS CR√çTICAS - EJERCICIOS DEBEN SER L√ìGICOS:
‚ùå PROHIBIDO: Preguntas donde la respuesta obvia no est√© entre las opciones
‚ùå PROHIBIDO: "Orden√© pizza, ¬øqu√© orden√©?" con opciones irrelevantes
‚ùå PROHIBIDO: Preguntas confusas o que no ense√±en ingl√©s real
‚úÖ OBLIGATORIO: Todas las opciones deben ser relevantes a la pregunta
‚úÖ OBLIGATORIO: La respuesta correcta debe ser obvia y educativa
‚úÖ OBLIGATORIO: Ense√±ar ingl√©s real y √∫til

TIPOS DE EJERCICIO V√ÅLIDOS:

VOCABULARIO (nivel ${params.level}):
- "What does 'order' mean in 'I order food on Uber Eats'? / ¬øQu√© significa 'order' en 'I order food on Uber Eats'?" 
- Opciones: ["pedir/ordenar", "comer", "cocinar", "pagar"]

GRAM√ÅTICA:
- "I _____ pizza last night. / Yo _____ pizza anoche."
- Opciones: ["ordered", "order", "ordering", "orders"]

TRADUCCI√ìN:
- "¬øC√≥mo se dice 'ped√≠ comida' en ingl√©s? / How do you say 'ped√≠ comida' in English?"
- Opciones: ["I ordered food", "I eat food", "I cook food", "I like food"]

COMPRENSI√ìN:
- "Text: 'Maria ordered sushi on Uber Eats. She loves Japanese food.' Question: What kind of food does Maria like? / ¬øQu√© tipo de comida le gusta a Mar√≠a?"
- Opciones: ["Japanese food", "Italian food", "Mexican food", "Chinese food"]

INSTRUCCIONES ESPEC√çFICAS PARA NIVEL ${params.level}:
${params.level === 'A1' ? `
- Usar vocabulario S√öPER b√°sico: eat, drink, like, want, have, go, come, etc.
- Preguntas sobre: comida b√°sica, colores, n√∫meros 1-10, familia, casa
- Ejemplo: "What is this? üçï / ¬øQu√© es esto? üçï" ‚Üí opciones: ["pizza", "hamburger", "sandwich", "salad"] (CORRECTO - todas son comidas)
` : ''}

${params.level === 'A2' ? `
- Vocabulario intermedio: order, deliver, prefer, usually, sometimes, etc.
- Preguntas sobre: rutinas diarias, presente perfecto b√°sico, preposiciones simples
- Contextos: apps de comida, trabajo, familia
` : ''}

VALIDACI√ìN OBLIGATORIA:
1. ¬øLa pregunta tiene sentido l√≥gico?
2. ¬øTodas las opciones son relevantes?
3. ¬øLa respuesta correcta es obvia?
4. ¬øRealmente ense√±a ingl√©s √∫til?
5. ¬øUn principiante lo entender√≠a?

JSON REQUERIDO:
{
  "question": "[Pregunta l√≥gica y educativa en ingl√©s Y espa√±ol separada por ' / ']",
  "instruction": "Selecciona la respuesta correcta",
  "options": ["opci√≥n relevante 1", "opci√≥n relevante 2", "opci√≥n relevante 3", "opci√≥n relevante 4"],
  "correctAnswer": 0,
  "explanation": "üéØ EXPLICACI√ìN CLARA: [Por qu√© es correcta y qu√© ense√±a este ejercicio]"
}

EJEMPLOS DE PREGUNTAS BUENAS:
- "I _____ sushi from Uber Eats yesterday. / Yo _____ sushi de Uber Eats ayer." ‚Üí ["ordered", "eat", "cook", "deliver"]
- "What does 'delivery' mean? / ¬øQu√© significa 'delivery'?" ‚Üí ["entrega a domicilio", "cocinar", "comer", "pagar"]
- "How do you say 'me gusta la pizza'? / ¬øC√≥mo se dice 'me gusta la pizza'?" ‚Üí ["I like pizza", "I eat pizza", "I want pizza", "I cook pizza"]

¬°GENERA SOLO EJERCICIOS L√ìGICOS QUE REALMENTE ENSE√ëEN INGL√âS!`;

    try {
      const model = this.genAI.getGenerativeModel({
        model: "gemini-1.5-flash",
        generationConfig: {
          temperature: 0.95, // M√°s creatividad
          topP: 0.9,
          maxOutputTokens: 1024,
        },
      });

      console.log("ü§ñ GENERANDO CON PROMPT MEJORADO");
      const result = await model.generateContent(enhancedPrompt);
      const text = result.response.text();

      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error("No JSON found in AI response");
      }

      const exerciseData = JSON.parse(jsonMatch[0]);
      
      // VALIDACI√ìN MEJORADA
      if (!exerciseData.question || !exerciseData.options || exerciseData.options.length !== 4) {
        throw new Error("Invalid exercise structure");
      }

      // MEJORAR explicaci√≥n si est√° en ingl√©s
      if (exerciseData.explanation && !exerciseData.explanation.includes('üéØ')) {
        exerciseData.explanation = `üéØ NIVEL ${params.level}: ${exerciseData.explanation}. Esta estructura es muy com√∫n en ingl√©s moderno.`;
      }

      // MEZCLAR OPCIONES FORZADAMENTE
      const correctAnswerText = exerciseData.options[exerciseData.correctAnswer || 0];
      const shuffledOptions = [...exerciseData.options];

      // ‚úÖ ALGORITMO FISHER-YATES PARA MEJOR MEZCLADO
      for (let i = shuffledOptions.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffledOptions[i], shuffledOptions[j]] = [shuffledOptions[j], shuffledOptions[i]];
      }

      const newCorrectAnswer = shuffledOptions.findIndex(option => option === correctAnswerText);

      console.log("üîÄ AI SHUFFLE RESULT:", {
        original: exerciseData.options,
        correctWas: correctAnswerText,
        shuffled: shuffledOptions,
        newCorrectIndex: newCorrectAnswer,
        newCorrectText: shuffledOptions[newCorrectAnswer]
      });

      // ‚úÖ VERIFICAR QUE EL MEZCLADO FUNCION√ì
      if (newCorrectAnswer === -1) {
        console.error("‚ùå SHUFFLE ERROR - usando original");
        return {
          question: exerciseData.question,
          instruction: exerciseData.instruction || "Selecciona la respuesta correcta",
          options: exerciseData.options,
          correctAnswer: exerciseData.correctAnswer || 0,
          explanation: exerciseData.explanation,
          xpReward: 10,
        };
      }

      // ‚úÖ VALIDAR QUE EL EJERCICIO SEA L√ìGICO
      const isLogical = this.validateExerciseLogic(exerciseData, 1);
      if (!isLogical) {
        console.warn("‚ùå Ejercicio il√≥gico detectado, regenerando...");
        throw new Error("Ejercicio il√≥gico generado por IA");
      }

      return {
        question: exerciseData.question,
        instruction: exerciseData.instruction || "Selecciona la respuesta correcta",
        options: shuffledOptions,
        correctAnswer: newCorrectAnswer,
        explanation: exerciseData.explanation,
        xpReward: 10,
      };

    } catch (error: any) {
      console.error("üö® ERROR IA GEMINI:", error);
      
      // Guardar si es error de cuota para mostrar notificaci√≥n
      if (error?.message?.includes('quota') || error?.message?.includes('429')) {
        localStorage.setItem('last_quota_error', new Date().toISOString());
        console.log("üîã Error de cuota guardado para UX");
      }
      
      throw error;
    }
  }

  // M√âTODO ELIMINADO - NO M√ÅS EJERCICIOS EST√ÅTICOS

  // NUEVA FUNCI√ìN: Generar 8 ejercicios √∫nicos de una vez
  async generateCompleteSession(params: {
    level: "A1" | "A2" | "B1" | "B2";
    userId: string;
    userWeaknesses?: string[];
    userStrengths?: string[];
    completedLessons?: number;
  }): Promise<SmartExercise[]> {

    const enhancedPrompt = `Eres un profesor EXPERTO que crea ejercicios REALMENTE √öTILES para hispanohablantes nivel ${params.level}.

üéØ OBJETIVO: Generar 8 ejercicios que REALMENTE ense√±en ingl√©s pr√°ctico y √∫til.

NIVEL DEL ESTUDIANTE: ${params.level}
EJERCICIOS COMPLETADOS: ${params.completedLessons || 0}
DEBILIDADES: ${params.userWeaknesses?.join(', ') || 'ninguna detectada'}

‚ùå PROHIBIDO ABSOLUTO - EJERCICIOS IN√öTILES:
- Vocabulario obvio ("What does 'sister' mean?" ‚Üí hermana)
- Preguntas donde la respuesta est√° literal en el texto
- Colores b√°sicos, n√∫meros, familia (son demasiado b√°sicos)
- Traducci√≥n directa palabra por palabra
- Ejercicios que no ense√±an ingl√©s REAL

‚úÖ OBLIGATORIO - EJERCICIOS EDUCATIVOS √öTILES:

**TIPO 1: CONSTRUCCI√ìN DE ORACIONES (25% de ejercicios)**
Ejemplo: "Ordena las palabras para formar una oraci√≥n correcta:"
- Palabras desordenadas: [every, go, I, to, day, work]
- Respuesta: "I go to work every day"
- Opciones: ["I go to work every day", "Every day I work go to", "Work I go every day to", "To work every I go day"]

**TIPO 2: GRAM√ÅTICA EN CONTEXTO REAL (25% de ejercicios)**
Ejemplo: "Complete the conversation between friends:"
- "Hi! How _____ your weekend?"
- Opciones: ["was", "were", "is", "are"]
- Contexto: Conversaci√≥n real entre amigos

**TIPO 3: SITUACIONES PR√ÅCTICAS (25% de ejercicios)**
Ejemplo: "You're at a restaurant. How do you ask for the menu?"
- Opciones: ["Can I have the menu, please?", "Where is food?", "Give me eating", "Menu I want"]
- Ense√±a ingl√©s que S√ç se usa en la vida real

**TIPO 4: COMPRENSI√ìN CON INFERENCIA (25% de ejercicios)**
Ejemplo: "Sarah says 'I'm exhausted!' after running. What does 'exhausted' probably mean?"
- Opciones: ["very tired", "very happy", "very hungry", "very cold"]
- Ense√±a vocabulario por CONTEXTO, no memorizaci√≥n

REGLAS PEDAG√ìGICAS CR√çTICAS:
1. Cada ejercicio debe ense√±ar algo NUEVO y √öTIL
2. Enfocar en ESTRUCTURAS que se usan diariamente
3. Crear SITUACIONES REALES (restaurante, trabajo, amigos)
4. Opciones deben ser TODAS plausibles (no obvias)
5. Ense√±ar por CONTEXTO e INFERENCIA, no memorizaci√≥n

VOCABULARIO √öTIL PARA NIVEL ${params.level}:
${params.level === 'A1' ? `
- Verbos de acci√≥n: want, need, like, have, go, come, see, hear
- Situaciones: ordering food, asking directions, shopping, making friends
- Estructuras: "Can I...?", "I would like...", "How much is...?"
` : ''}

${params.level === 'A2' ? `
- Tiempos verbales: present perfect, past continuous, future plans
- Situaciones: job interviews, making appointments, explaining problems
- Estructuras: "I have been...", "I was doing...", "I'm going to..."
` : ''}

EJEMPLOS ESPEC√çFICOS POR NIVEL:

${params.level === 'A1' ? `
NIVEL A1 - INGL√âS PR√ÅCTICO Y √öTIL:
1. "At a restaurant, how do you ask for water? / En un restaurante, ¬øc√≥mo pides agua?" ‚Üí opciones: ["Can I have water, please?", "Water me give", "I want water now", "Where water is?"]
2. "Complete the conversation: 'Hi! How _____ you?' / Completa la conversaci√≥n: '¬°Hola! ¬øC√≥mo _____ t√∫?'" ‚Üí opciones: ["are", "is", "am", "be"]
3. "You're lost. How do you ask for directions? / Est√°s perdido. ¬øC√≥mo pides direcciones?" ‚Üí opciones: ["Excuse me, where is...?", "Tell me place now", "I need go there", "Direction please give"]
4. "Order these words to make a sentence: [want, I, to, home, go] / Ordena estas palabras para hacer una oraci√≥n:" ‚Üí opciones: ["I want to go home", "Want I to go home", "Home I want go to", "Go home I want to"]
5. "At a store, the clerk says 'Can I help you?' What does this mean? / En una tienda, el empleado dice 'Can I help you?' ¬øQu√© significa esto?" ‚Üí opciones: ["¬øPuedo ayudarte?", "¬øTienes dinero?", "¬øQu√© quieres comprar?", "¬øDe d√≥nde eres?"]
6. "Complete: 'I _____ coffee every morning.' / Completa: 'Yo _____ caf√© cada ma√±ana.'" ‚Üí opciones: ["drink", "drinks", "drinking", "drank"]
7. "Someone says 'Nice to meet you!' What do you respond? / Alguien dice '¬°Mucho gusto!' ¬øQu√© respondes?" ‚Üí opciones: ["Nice to meet you too!", "Thank you very much!", "I am fine, thanks!", "See you later!"]
8. "You want to buy something but don't know the price. What do you ask? / Quieres comprar algo pero no sabes el precio. ¬øQu√© preguntas?" ‚Üí opciones: ["How much is this?", "What price this?", "Money how much?", "Cost what is?"]
` : ''}

${params.level === 'A2' ? `
NIVEL A2 - INGL√âS PR√ÅCTICO AVANZADO:
1. "At a job interview, they ask 'What are your strengths?' How do you respond? / En una entrevista de trabajo, preguntan '¬øCu√°les son tus fortalezas?' ¬øC√≥mo respondes?" ‚Üí opciones: ["I am hardworking and reliable", "I like work very much", "I have many good things", "Work is good for me"]
2. "Complete the conversation: 'I _____ working here since 2020.' / Completa la conversaci√≥n: 'Yo _____ trabajando aqu√≠ desde 2020.'" ‚Üí opciones: ["have been", "am", "was", "will be"]
3. "You need to reschedule a meeting. What do you say? / Necesitas reprogramar una reuni√≥n. ¬øQu√© dices?" ‚Üí opciones: ["Can we reschedule for tomorrow?", "Meeting change tomorrow please", "I no can meeting today", "Tomorrow better for meeting"]
4. "Order these words: [going, I'm, to, the, visit, museum] / Ordena estas palabras:" ‚Üí opciones: ["I'm going to visit the museum", "Going I'm to visit the museum", "The museum I'm going to visit", "Visit the museum I'm going to"]
5. "Someone says 'I'm feeling under the weather.' What do they mean? / Alguien dice 'I'm feeling under the weather.' ¬øQu√© quieren decir?" ‚Üí opciones: ["I'm feeling sick", "I'm feeling cold", "I'm feeling happy", "I'm feeling confused"]
6. "Complete: 'If I _____ time, I would travel more.' / Completa: 'Si yo _____ tiempo, viajar√≠a m√°s.'" ‚Üí opciones: ["had", "have", "has", "having"]
7. "You're explaining a problem at work. How do you start? / Est√°s explicando un problema en el trabajo. ¬øC√≥mo empiezas?" ‚Üí opciones: ["I've been having an issue with...", "Problem I have with...", "Bad thing happen with...", "Issue is with..."]
8. "Someone asks 'How long have you been studying English?' You started 2 years ago. What do you answer? / Alguien pregunta '¬øCu√°nto tiempo has estado estudiando ingl√©s?' Empezaste hace 2 a√±os. ¬øQu√© respondes?" ‚Üí opciones: ["I've been studying for 2 years", "I study English 2 years", "2 years I am studying", "Since 2 years I study"]
` : ''}

INSTRUCCIONES DE VALIDACI√ìN INTERNA:
1. ¬øCada pregunta ense√±a ingl√©s √öTIL para la vida real?
2. ¬øLas situaciones son PR√ÅCTICAS (restaurante, trabajo, tienda)?
3. ¬øLas opciones ense√±an ESTRUCTURAS que se usan diariamente?
4. ¬øEvita vocabulario obvio como colores, n√∫meros, familia?
5. ¬øEnse√±a por CONTEXTO e INFERENCIA, no memorizaci√≥n?
6. ¬øLas opciones son TODAS plausibles pero solo una correcta?
7. ¬øRealmente prepara al estudiante para USAR ingl√©s real?

‚ùå PROHIBIDO ABSOLUTO - OPCIONES SIMILARES:
- "Me gusta las manzanas" y "Me gustan las manzanas" (demasiado similares)
- "I am happy" y "I'm happy" (son lo mismo)
- "big house" y "large house" (sin√≥nimos confusos para principiantes)

‚úÖ OBLIGATORIO - OPCIONES DISTINTIVAS:
- Cada opci√≥n debe ser CLARAMENTE diferente en significado
- Para gram√°tica: usar tiempos COMPLETAMENTE diferentes (am/was/will be)
- Para vocabulario: usar palabras de CATEGOR√çAS diferentes (apple/car/house/red)
- Para traducci√≥n: opciones que NO se parezcan fon√©ticamente

FORMATO JSON REQUERIDO - 8 ejercicios √öNICOS y √öTILES:
{
  "exercises": [
    {
      "question": "[Situaci√≥n real pr√°ctica en ingl√©s / Situaci√≥n en espa√±ol]",
      "instruction": "[Instrucci√≥n clara de qu√© hacer]",
      "options": ["[opci√≥n √∫til 1]", "[opci√≥n √∫til 2]", "[opci√≥n √∫til 3]", "[opci√≥n √∫til 4]"],
      "correctAnswer": 0,
      "explanation": "üéØ [Por qu√© esta estructura es √∫til en ingl√©s real + cu√°ndo usarla]",
      "topic": "[gram√°tica pr√°ctica, conversaci√≥n real, situaciones √∫tiles]"
    }
  ]
}

üö® RECORDATORIO CR√çTICO PARA INGL√âS PR√ÅCTICO:
- TODAS las preguntas deben ense√±ar ingl√©s que se USA en la vida real
- TODAS las explicaciones deben explicar CU√ÅNDO y C√ìMO usar la estructura
- Situaciones REALES: restaurante, tienda, trabajo, conversaciones
- NO vocabulario obvio: evitar colores, n√∫meros, familia b√°sica
- Contextos √öTILES: pedir ayuda, hacer preguntas, expresar necesidades

¬°GENERA 8 EJERCICIOS QUE REALMENTE ENSE√ëEN INGL√âS √öTIL PARA LA VIDA REAL!`;

    try {
      const model = this.genAI.getGenerativeModel({
        model: "gemini-1.5-flash",
        generationConfig: {
          temperature: 0.8, // Menos creatividad para m√°s l√≥gica
          topP: 0.8,
          maxOutputTokens: 4000, // M√°s tokens para 8 ejercicios
        },
      });

      console.log("ü§ñ GENERANDO SESI√ìN COMPLETA DE 8 EJERCICIOS");
      const result = await model.generateContent(enhancedPrompt);
      const text = result.response.text();

      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error("No JSON found in AI response");
      }

      const sessionData = JSON.parse(jsonMatch[0]);
      
      // Validar que tenemos 8 ejercicios
      if (!sessionData.exercises || sessionData.exercises.length !== 8) {
        throw new Error("IA no gener√≥ exactamente 8 ejercicios");
      }

      // Validar cada ejercicio con fallback m√°s permisivo
      const validatedExercises = sessionData.exercises.map((exercise: any, index: number) => {
        
        // ‚úÖ INTENTAR VALIDACI√ìN ESTRICTA PRIMERO
        let isValid = true;
        try {
          isValid = this.validateExerciseLogic(exercise, index + 1);
        } catch (error) {
          console.warn(`‚ö†Ô∏è Error en validaci√≥n ejercicio ${index + 1}:`, error);
          isValid = false;
        }
        
        // ‚úÖ SI FALLA VALIDACI√ìN, USAR VALIDACI√ìN B√ÅSICA
        if (!isValid) {
          console.warn(`‚ö†Ô∏è Ejercicio ${index + 1} fall√≥ validaci√≥n estricta, aplicando validaci√≥n b√°sica`);
          
          // Validaci√≥n b√°sica m√≠nima
          const hasValidStructure = exercise.question && 
                                   exercise.options && 
                                   exercise.options.length === 4 &&
                                   exercise.correctAnswer >= 0 && 
                                   exercise.correctAnswer < 4;
          
          if (!hasValidStructure) {
            // Solo aqu√≠ rechazar completamente
            throw new Error(`Ejercicio ${index + 1} tiene estructura inv√°lida b√°sica`);
          }
          
          console.log(`‚úÖ Ejercicio ${index + 1} aprobado con validaci√≥n b√°sica`);
        }

        // Mezclar opciones para cada ejercicio
        const correctAnswerText = exercise.options[exercise.correctAnswer];
        const shuffledOptions = [...exercise.options];
        
        for (let i = shuffledOptions.length - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1));
          [shuffledOptions[i], shuffledOptions[j]] = [shuffledOptions[j], shuffledOptions[i]];
        }
        
        const newCorrectAnswer = shuffledOptions.findIndex((option: string) => option === correctAnswerText);

        return {
          id: `ai_session_${Date.now()}_${index}_${Math.random().toString(36).substr(2, 9)}`,
          question: exercise.question,
          instruction: exercise.instruction || "Selecciona la respuesta correcta",
          options: shuffledOptions,
          correctAnswer: newCorrectAnswer,
          explanation: exercise.explanation,
          xpReward: 10,
          topic: exercise.topic || 'general',
          level: params.level,
          source: 'ai' as const,
          difficulty: 'medium' as const,
          learningFocus: [exercise.topic || 'general']
        };
      });

      console.log("‚úÖ SESI√ìN COMPLETA GENERADA Y VALIDADA");
      return validatedExercises;

    } catch (error) {
      console.error("üö® ERROR GENERANDO SESI√ìN COMPLETA:", error);
      throw error;
    }
  }

  // VALIDACI√ìN MEJORADA - MENOS ESTRICTA, M√ÅS INTELIGENTE
  private validateExerciseLogic(exercise: any, exerciseNumber: number): boolean {
    console.log(`üîç VALIDANDO EJERCICIO ${exerciseNumber}:`, {
      question: exercise.question,
      options: exercise.options,
      correctAnswer: exercise.correctAnswer,
      correctOption: exercise.options[exercise.correctAnswer]
    });
    
    const question = exercise.question.toLowerCase();
    const options = exercise.options;
    
    // ‚úÖ VALIDACIONES B√ÅSICAS (menos estrictas)
    if (!exercise.question || !exercise.options || exercise.options.length !== 4) {
      console.warn(`‚ùå Ejercicio ${exerciseNumber}: Estructura inv√°lida`);
      return false;
    }
    
    if (exercise.correctAnswer < 0 || exercise.correctAnswer >= 4) {
      console.warn(`‚ùå Ejercicio ${exerciseNumber}: √çndice de respuesta correcta inv√°lido`);
      return false;
    }
    
    const correctOption = options[exercise.correctAnswer]?.toLowerCase() || '';
    
    // ‚úÖ VALIDACIONES ESPEC√çFICAS M√ÅS INTELIGENTES
    
    // Solo rechazar casos OBVIAMENTE problem√°ticos
    const obviouslyProblematic = [
      // Respuesta exacta en pregunta
      question.includes(correctOption) && correctOption.length > 5,
      // Emojis incorrectos espec√≠ficos
      (question.includes('cat') || question.includes('gato')) && question.includes('üê∂'),
      (question.includes('dog') || question.includes('perro')) && question.includes('üê±'),
      // Preguntas completamente redundantes
      question.includes('what did i see') && question.includes('sunset') && correctOption.includes('sunset')
    ];
    
    if (obviouslyProblematic.some(problem => problem)) {
      console.warn(`‚ùå Ejercicio ${exerciseNumber}: Problema obvio detectado`);
      return false;
    }
    
    // ‚úÖ VALIDAR QUE LAS OPCIONES SEAN DIFERENTES
    const uniqueOptions = new Set(options.map((opt: string) => opt.toLowerCase()));
    if (uniqueOptions.size < 4) {
      console.warn(`‚ùå Ejercicio ${exerciseNumber}: Opciones duplicadas`);
      return false;
    }
    
    // ‚úÖ NUEVA VALIDACI√ìN: Detectar opciones muy similares
    const optionsLower = options.map((opt: string) => opt.toLowerCase().trim());
    
    for (let i = 0; i < optionsLower.length; i++) {
      for (let j = i + 1; j < optionsLower.length; j++) {
        const similarity = this.calculateTextSimilarity(optionsLower[i], optionsLower[j]);
        if (similarity > 0.85) { // Si son 85% similares
          console.warn(`‚ùå Ejercicio ${exerciseNumber}: Opciones muy similares detectadas`);
          console.warn(`Opci√≥n ${i}: "${optionsLower[i]}"`);
          console.warn(`Opci√≥n ${j}: "${optionsLower[j]}"`);
          console.warn(`Similitud: ${(similarity * 100).toFixed(1)}%`);
          return false;
        }
      }
    }
    
    console.log(`‚úÖ Ejercicio ${exerciseNumber}: Validaci√≥n APROBADA`);
    return true;
  }

  // ‚úÖ NUEVA FUNCI√ìN: Generar ejercicios pr√°cticos espec√≠ficos
  private generatePracticalExercise(level: string, exerciseNumber: number): string {
    const practicalExercises = {
      'A1': [
        {
          type: "ordering",
          question: "Ordena las palabras para pedir comida en un restaurante: / Order the words to ask for food at a restaurant:",
          words: ["I", "would", "like", "pizza", "please"],
          correct: "I would like pizza, please",
          options: ["I would like pizza, please", "Pizza I would please like", "Please pizza I would like", "Like I would pizza please"]
        },
        {
          type: "conversation",
          question: "You want to know the time. What do you ask? / Quieres saber la hora. ¬øQu√© preguntas?",
          options: ["What time is it?", "How much time?", "Time please give", "Where is time?"]
        },
        {
          type: "situation",
          question: "At a store, you can't find something. How do you ask for help? / En una tienda, no encuentras algo. ¬øC√≥mo pides ayuda?",
          options: ["Excuse me, where is the bathroom?", "Help me find something", "I need assistance, please", "Where are things?"]
        },
        {
          type: "practical_response",
          question: "Someone says 'How are you?' What's the most common response? / Alguien dice '¬øC√≥mo est√°s?' ¬øCu√°l es la respuesta m√°s com√∫n?",
          options: ["I'm fine, thank you", "I am very good person", "My life is okay", "I feel many things"]
        }
      ],
      'A2': [
        {
          type: "workplace",
          question: "Your boss asks 'Can you finish this by tomorrow?' How do you respond positively? / Tu jefe pregunta '¬øPuedes terminar esto para ma√±ana?' ¬øC√≥mo respondes positivamente?",
          options: ["Yes, I can do that", "Tomorrow I will finish", "I think maybe yes", "Work tomorrow is possible"]
        },
        {
          type: "appointment",
          question: "You need to reschedule a meeting. What do you say? / Necesitas reprogramar una reuni√≥n. ¬øQu√© dices?",
          options: ["Can we reschedule for tomorrow?", "Meeting change tomorrow please", "I no can meeting today", "Tomorrow better for meeting"]
        },
        {
          type: "problem_solving",
          question: "You're explaining a problem at work. How do you start? / Est√°s explicando un problema en el trabajo. ¬øC√≥mo empiezas?",
          options: ["I've been having an issue with...", "Problem I have with...", "Bad thing happen with...", "Issue is with..."]
        }
      ]
    };
    
    const levelExercises = practicalExercises[level as keyof typeof practicalExercises] || practicalExercises['A1'];
    const selected = levelExercises[exerciseNumber % levelExercises.length];
    
    return `
**SITUACI√ìN PR√ÅCTICA:**
Pregunta: "${selected.question}"
Opciones educativas que ense√±an ingl√©s REAL:
${selected.options.map((opt, i) => `${i === 0 ? '‚úì' : ''} ${opt}`).join('\n')}
`;
  }

  // ‚úÖ NUEVA FUNCI√ìN: Calcular similitud entre textos
  private calculateTextSimilarity(text1: string, text2: string): number {
    // Algoritmo simple de similitud de texto
    const words1 = text1.split(' ').filter(w => w.length > 1); // Filtrar palabras muy cortas
    const words2 = text2.split(' ').filter(w => w.length > 1);
    
    if (words1.length === 0 || words2.length === 0) return 0;
    
    let commonWords = 0;
    words1.forEach(word1 => {
      if (words2.some(word2 => 
        word2.includes(word1) || word1.includes(word2) || 
        Math.abs(word1.length - word2.length) <= 1 && this.levenshteinDistance(word1, word2) <= 1
      )) {
        commonWords++;
      }
    });
    
    const maxWords = Math.max(words1.length, words2.length);
    return commonWords / maxWords;
  }

  // ‚úÖ NUEVA FUNCI√ìN: Distancia de Levenshtein para detectar palabras muy similares
  private levenshteinDistance(str1: string, str2: string): number {
    const matrix = [];
    
    for (let i = 0; i <= str2.length; i++) {
      matrix[i] = [i];
    }
    
    for (let j = 0; j <= str1.length; j++) {
      matrix[0][j] = j;
    }
    
    for (let i = 1; i <= str2.length; i++) {
      for (let j = 1; j <= str1.length; j++) {
        if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
          matrix[i][j] = matrix[i - 1][j - 1];
        } else {
          matrix[i][j] = Math.min(
            matrix[i - 1][j - 1] + 1, // substitution
            matrix[i][j - 1] + 1,     // insertion
            matrix[i - 1][j] + 1      // deletion
          );
        }
      }
    }
    
    return matrix[str2.length][str1.length];
  }

  /**
   * Genera ejemplos espec√≠ficos para cada tipo de ejercicio
   */
  private getExampleForType(type: string, context: string): string {
    const examples: Record<string, string> = {
      "VOCABULARY": `"What does 'swipe' mean in '${context}'?" ‚Üí A) deslizar ‚úì B) tocar C) presionar D) escribir`,
      "GRAMMAR": `"I ____ ${context} every day." ‚Üí A) have been doing ‚úì B) am doing C) did D) will do`,
      "TRANSLATION": `"¬øC√≥mo se dice 'me encanta esto' when ${context}?" ‚Üí A) I love this ‚úì B) I like this C) I want this D) I need this`,
      "COMPREHENSION": `"Sarah was ${context} when her phone died. What happened?" ‚Üí A) Her phone died ‚úì B) She was happy C) She was working D) She was sleeping`
    };

    return examples[type] || `Example for ${type} in context of ${context}`;
  }
}

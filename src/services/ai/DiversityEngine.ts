/**
 * DIVERSITY ENGINE - SISTEMA AVANZADO ANTI-REPETICI√ìN
 * English Master App - Garantiza ejercicios √∫nicos y variados
 */

import { 
  getFirestore, 
  doc, 
  setDoc, 
  getDoc, 
  updateDoc, 
  arrayUnion,
  serverTimestamp,
  query,
  collection,
  where,
  getDocs,
  limit,
  orderBy
} from 'firebase/firestore';

export interface ExerciseHistory {
  userId: string;
  level: string;
  questionHash: string;
  questionText: string;
  skillFocus: string;
  difficulty: number;
  timestamp: Date;
  sessionId: string;
}

export interface DiversityRequirements {
  minVariationsPerSkill: number;
  maxRepeatFrequency: number; // d√≠as antes de permitir repetir
  skillDistribution: Record<string, number>; // porcentaje por skill
  difficultyProgression: boolean;
}

export class DiversityEngine {
  private db = getFirestore();
  
  // REQUISITOS DE DIVERSIDAD POR NIVEL
  private static DIVERSITY_REQUIREMENTS: Record<string, DiversityRequirements> = {
    A1: {
      minVariationsPerSkill: 5, // M√≠nimo 5 variaciones diferentes por skill
      maxRepeatFrequency: 7, // No repetir hasta 7 d√≠as despu√©s
      skillDistribution: {
        'social_greetings': 0.25,
        'basic_needs': 0.25, 
        'courtesy': 0.20,
        'personal_info': 0.15,
        'emergency_help': 0.15
      },
      difficultyProgression: true
    },
    A2: {
      minVariationsPerSkill: 8,
      maxRepeatFrequency: 10,
      skillDistribution: {
        'daily_routines': 0.30,
        'past_experiences': 0.25,
        'future_plans': 0.20,
        'preferences': 0.15,
        'basic_conversation': 0.10
      },
      difficultyProgression: true
    },
    B1: {
      minVariationsPerSkill: 10,
      maxRepeatFrequency: 14,
      skillDistribution: {
        'work_situations': 0.25,
        'problem_solving': 0.25,
        'opinions': 0.20,
        'hypotheticals': 0.15,
        'complex_grammar': 0.15
      },
      difficultyProgression: true
    },
    B2: {
      minVariationsPerSkill: 12,
      maxRepeatFrequency: 21,
      skillDistribution: {
        'professional_communication': 0.30,
        'analysis': 0.25,
        'nuanced_vocabulary': 0.20,
        'advanced_grammar': 0.15,
        'cultural_context': 0.10
      },
      difficultyProgression: true
    }
  };

  /**
   * GENERAR EJERCICIOS CON DIVERSIDAD GARANTIZADA
   */
  async generateDiverseExercises(
    userId: string, 
    level: string, 
    count: number = 8
  ): Promise<any[]> {
    try {
      console.log(`üéØ Generando ${count} ejercicios diversos para ${level}`);
      
      // 1. Obtener historial del usuario
      const history = await this.getUserExerciseHistory(userId, level);
      
      // 2. Analizar patterns y generar requirements
      const diversityPlan = await this.createDiversityPlan(userId, level, count, history);
      
      // 3. Generar ejercicios con constraints espec√≠ficos
      const exercises = await this.generateWithConstraints(userId, level, diversityPlan);
      
      // 4. Validar diversidad antes de entregar
      const validatedExercises = await this.validateDiversity(exercises, history);
      
      // 5. Guardar en historial
      await this.saveExercisesToHistory(userId, level, validatedExercises);
      
      console.log(`‚úÖ ${validatedExercises.length} ejercicios diversos generados`);
      return validatedExercises;
      
    } catch (error) {
      console.error('‚ùå Error generating diverse exercises:', error);
      throw error;
    }
  }

  /**
   * OBTENER HISTORIAL COMPLETO DEL USUARIO
   */
  private async getUserExerciseHistory(userId: string, level: string): Promise<ExerciseHistory[]> {
    try {
      const historyRef = collection(this.db, 'exerciseHistory');
      const q = query(
        historyRef,
        where('userId', '==', userId),
        where('level', '==', level),
        orderBy('timestamp', 'desc'),
        limit(200) // √öltimos 200 ejercicios
      );
      
      const snapshot = await getDocs(q);
      return snapshot.docs.map(doc => ({
        ...doc.data(),
        timestamp: doc.data().timestamp.toDate()
      } as ExerciseHistory));
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Error loading history, using empty:', error);
      return [];
    }
  }

  /**
   * CREAR PLAN DE DIVERSIDAD INTELIGENTE
   */
  private async createDiversityPlan(
    userId: string, 
    level: string, 
    count: number, 
    history: ExerciseHistory[]
  ): Promise<any> {
    const requirements = DiversityEngine.DIVERSITY_REQUIREMENTS[level];
    
    // Analizar qu√© skills est√°n sobre-representados
    const skillCounts = history.reduce((acc, ex) => {
      acc[ex.skillFocus] = (acc[ex.skillFocus] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    // Determinar skills que necesitan m√°s variaci√≥n
    const underRepresentedSkills = Object.keys(requirements.skillDistribution)
      .filter(skill => (skillCounts[skill] || 0) < requirements.minVariationsPerSkill)
      .sort((a, b) => (skillCounts[a] || 0) - (skillCounts[b] || 0));

    // Crear distribuci√≥n objetivo
    const targetDistribution: Record<string, number> = {};
    const prioritySkills = underRepresentedSkills.slice(0, Math.ceil(count * 0.6));
    
    prioritySkills.forEach((skill, index) => {
      targetDistribution[skill] = Math.ceil(count / prioritySkills.length);
    });

    // Completar con skills balanceados
    const remainingCount = count - Object.values(targetDistribution).reduce((sum, val) => sum + val, 0);
    const balancedSkills = Object.keys(requirements.skillDistribution)
      .filter(skill => !prioritySkills.includes(skill));

    balancedSkills.forEach(skill => {
      targetDistribution[skill] = Math.floor(remainingCount / balancedSkills.length);
    });

    return {
      targetDistribution,
      avoidQuestions: history.slice(0, 50).map(h => h.questionHash), // Evitar √∫ltimas 50
      difficultyRange: this.calculateDifficultyRange(level, history),
      situationVariety: this.getSituationVariety(level),
      grammarFocus: this.getGrammarFocus(level, history)
    };
  }

  /**
   * GENERAR EJERCICIOS CON CONSTRAINTS ESPEC√çFICOS
   */
  private async generateWithConstraints(
    userId: string, 
    level: string, 
    diversityPlan: any
  ): Promise<any[]> {
    const exercises: any[] = [];
    
    for (const [skill, targetCount] of Object.entries(diversityPlan.targetDistribution)) {
      if (typeof targetCount !== 'number' || targetCount <= 0) continue;
      
      for (let i = 0; i < targetCount; i++) {
        const constrainedPrompt = this.buildConstrainedPrompt(
          level, 
          skill, 
          diversityPlan,
          exercises.length + 1
        );
        
        try {
          const exercise = await this.generateSingleExercise(constrainedPrompt, level, skill);
          if (exercise && this.validateExerciseUniqueness(exercise, exercises)) {
            exercises.push(exercise);
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è Error generating exercise for ${skill}:`, error);
        }
      }
    }

    return exercises;
  }

  /**
   * CONSTRUIR PROMPT CON CONSTRAINTS ESPEC√çFICOS
   */
  private buildConstrainedPrompt(
    level: string, 
    skill: string, 
    diversityPlan: any, 
    exerciseNumber: number
  ): string {
    const situationVariations = diversityPlan.situationVariety[skill] || [];
    const selectedSituation = situationVariations[exerciseNumber % situationVariations.length];
    
    return `GENERA UN EJERCICIO √öNICO Y ESPEC√çFICO PARA NIVEL ${level}

üéØ SKILL OBLIGATORIO: ${skill}
üé≠ SITUACI√ìN ESPEC√çFICA: ${selectedSituation}
üö´ EVITAR COMPLETAMENTE: ${diversityPlan.avoidQuestions.join(', ')}

REGLAS ESTRICTAS DE DIVERSIDAD:
1. La situaci√≥n debe ser EXACTAMENTE: ${selectedSituation}
2. NUNCA usar estas frases prohibidas: ${this.getProhibitedPhrases(level)}
3. Dificultad: ${diversityPlan.difficultyRange.min} - ${diversityPlan.difficultyRange.max}
4. Gram√°tica focus: ${diversityPlan.grammarFocus}

FORMATO JSON REQUERIDO:
{
  "id": "${level}_${skill}_unique_${Date.now()}_${exerciseNumber}",
  "type": "multiple_choice",
  "situation": "${selectedSituation}",
  "question": "[PREGUNTA √öNICA EN ESPA√ëOL PARA A1]",
  "options": ["[opci√≥n 1]", "[opci√≥n 2]", "[opci√≥n 3]", "[opci√≥n 4]"],
  "correct_answer": 0,
  "explanation": "[Explicaci√≥n pedag√≥gica detallada]",
  "level": "${level}",
  "skill_focus": "${skill}",
  "difficulty": ${diversityPlan.difficultyRange.min + Math.random() * (diversityPlan.difficultyRange.max - diversityPlan.difficultyRange.min)},
  "uniqueness_hash": "${this.generateUniqueHash(selectedSituation, skill)}"
}

GENERA 1 EJERCICIO COMPLETAMENTE √öNICO Y √öTIL.`;
  }

  /**
   * OBTENER FRASES PROHIBIDAS POR NIVEL
   */
  private getProhibitedPhrases(level: string): string[] {
    const commonProhibited = [
      'Good morning', 'Hello', 'Thank you', 'I\'m hungry', 'What time is it',
      'My name is', 'How are you', 'Nice to meet you', 'Goodbye', 'See you later'
    ];

    const levelSpecific = {
      A1: [...commonProhibited],
      A2: [...commonProhibited, 'I went to', 'I like', 'I have'],
      B1: [...commonProhibited, 'I think', 'I believe', 'In my opinion'],
      B2: [...commonProhibited, 'However', 'Nevertheless', 'Furthermore']
    };

    return levelSpecific[level as keyof typeof levelSpecific] || commonProhibited;
  }

  /**
   * OBTENER VARIEDAD DE SITUACIONES POR SKILL
   */
  private getSituationVariety(level: string): Record<string, string[]> {
    const situationBank = {
      A1: {
        social_greetings: [
          'Te encuentras con tu jefe en el ascensor por la ma√±ana',
          'Un cliente entra a la tienda donde trabajas',
          'Te cruzas con tu vecino en el supermercado',
          'Llegas tarde a una reuni√≥n y necesitas saludar',
          'Un turista te pregunta algo en la calle'
        ],
        basic_needs: [
          'Est√°s en un restaurante y tienes mucha sed',
          'Necesitas encontrar un ba√±o urgentemente en un centro comercial',
          'Tienes hambre en el trabajo y no hay comida',
          'Hace fr√≠o y necesitas cerrar la ventana',
          'Necesitas ayuda para cargar algo pesado'
        ],
        courtesy: [
          'Alguien te sostiene la puerta abierta',
          'Un compa√±ero te presta su bol√≠grafo',
          'Te traen la comida que pediste',
          'Alguien te felicita por tu trabajo',
          'Un extra√±o te devuelve algo que se te cay√≥'
        ]
      },
      A2: {
        daily_routines: [
          'Describes tu rutina matutina a un compa√±ero nuevo',
          'Explicas qu√© haces los fines de semana',
          'Hablas sobre tu horario de trabajo',
          'Describes c√≥mo llegas al trabajo cada d√≠a',
          'Explicas tus h√°bitos de ejercicio'
        ]
      }
    };

    return situationBank[level as keyof typeof situationBank] || {};
  }

  /**
   * GENERAR HASH √öNICO PARA EVITAR REPETICIONES
   */
  private generateUniqueHash(situation: string, skill: string): string {
    const content = `${situation}_${skill}_${Date.now()}`;
    let hash = 0;
    for (let i = 0; i < content.length; i++) {
      const char = content.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash;
    }
    return Math.abs(hash).toString(36);
  }

  /**
   * GUARDAR EJERCICIOS EN HISTORIAL DE FIREBASE
   */
  private async saveExercisesToHistory(
    userId: string, 
    level: string, 
    exercises: any[]
  ): Promise<void> {
    try {
      const sessionId = `session_${Date.now()}`;
      
      for (const exercise of exercises) {
        const historyEntry: ExerciseHistory = {
          userId,
          level,
          questionHash: exercise.uniqueness_hash || exercise.id,
          questionText: exercise.question,
          skillFocus: exercise.skill_focus,
          difficulty: exercise.difficulty,
          timestamp: new Date(),
          sessionId
        };

        await setDoc(
          doc(this.db, 'exerciseHistory', `${userId}_${exercise.id}`),
          {
            ...historyEntry,
            timestamp: serverTimestamp()
          }
        );
      }

      console.log(`üíæ ${exercises.length} ejercicios guardados en historial Firebase`);
      
    } catch (error) {
      console.error('‚ùå Error saving to history:', error);
    }
  }

  /**
   * UTILIDADES PRIVADAS
   */
  private calculateDifficultyRange(level: string, history: ExerciseHistory[]): { min: number, max: number } {
    const ranges = {
      A1: { min: 0.1, max: 0.3 },
      A2: { min: 0.3, max: 0.5 },
      B1: { min: 0.5, max: 0.7 },
      B2: { min: 0.7, max: 0.9 }
    };
    return ranges[level as keyof typeof ranges] || ranges.A1;
  }

  private getGrammarFocus(level: string, history: ExerciseHistory[]): string {
    const grammarFocus = {
      A1: 'present simple, verb to be, basic questions',
      A2: 'past simple, present perfect, future with going to',
      B1: 'conditionals, passive voice, modal verbs',
      B2: 'advanced tenses, subjunctive, complex structures'
    };
    return grammarFocus[level as keyof typeof grammarFocus] || grammarFocus.A1;
  }

  private async generateSingleExercise(prompt: string, level: string, skill: string): Promise<any> {
    // Aqu√≠ se conectar√≠a con el GeminiService existente
    // Por ahora retorno un ejercicio mock para testing
    return {
      id: `${level}_${skill}_${Date.now()}`,
      type: 'multiple_choice',
      situation: 'Situaci√≥n √∫nica generada',
      question: 'Pregunta √∫nica generada',
      options: ['Opci√≥n 1', 'Opci√≥n 2', 'Opci√≥n 3', 'Opci√≥n 4'],
      correct_answer: 0,
      explanation: 'Explicaci√≥n √∫nica',
      level,
      skill_focus: skill,
      difficulty: 0.5,
      uniqueness_hash: this.generateUniqueHash(`${level}_${skill}`, Date.now().toString())
    };
  }

  private validateExerciseUniqueness(exercise: any, existingExercises: any[]): boolean {
    return !existingExercises.some(existing => 
      existing.question === exercise.question ||
      existing.uniqueness_hash === exercise.uniqueness_hash
    );
  }

  private async validateDiversity(exercises: any[], history: ExerciseHistory[]): Promise<any[]> {
    // Validar que no hay repeticiones con el historial
    return exercises.filter(exercise => 
      !history.some(h => h.questionText === exercise.question)
    );
  }
}